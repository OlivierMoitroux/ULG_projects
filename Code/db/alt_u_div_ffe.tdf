--alt_u_div DEVICE_FAMILY="MAX V" LPM_PIPELINE=0 MAXIMIZE_SPEED=5 SKIP_BITS=0 WIDTH_D=2 WIDTH_N=7 WIDTH_Q=7 WIDTH_R=2 denominator numerator quotient remainder
--VERSION_BEGIN 16.1 cbx_cycloneii 2016:10:24:15:04:16:SJ cbx_lpm_abs 2016:10:24:15:04:16:SJ cbx_lpm_add_sub 2016:10:24:15:04:16:SJ cbx_lpm_divide 2016:10:24:15:04:16:SJ cbx_mgl 2016:10:24:15:05:03:SJ cbx_nadder 2016:10:24:15:04:16:SJ cbx_stratix 2016:10:24:15:04:16:SJ cbx_stratixii 2016:10:24:15:04:16:SJ cbx_util_mgl 2016:10:24:15:04:16:SJ  VERSION_END


-- Copyright (C) 2016  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION add_sub_i4c (dataa[0..0], datab[0..0])
RETURNS ( cout, result[0..0]);
FUNCTION add_sub_j4c (dataa[1..0], datab[1..0])
RETURNS ( cout, result[1..0]);
FUNCTION add_sub_k4c (dataa[2..0], datab[2..0])
RETURNS ( cout, result[2..0]);

--synthesis_resources = 
SUBDESIGN alt_u_div_ffe
( 
	denominator[1..0]	:	input;
	numerator[6..0]	:	input;
	quotient[6..0]	:	output;
	remainder[1..0]	:	output;
) 
VARIABLE 
	add_sub_0 : add_sub_i4c;
	add_sub_1 : add_sub_j4c;
	add_sub_2 : add_sub_k4c;
	add_sub_3 : add_sub_k4c;
	add_sub_4 : add_sub_k4c;
	add_sub_5 : add_sub_k4c;
	add_sub_6 : add_sub_k4c;
	DenominatorIn[23..0]	: WIRE;
	DenominatorIn_tmp[23..0]	: WIRE;
	gnd_wire	: WIRE;
	nose[55..0]	: WIRE;
	NumeratorIn[55..0]	: WIRE;
	NumeratorIn_tmp[55..0]	: WIRE;
	prestg[20..0]	: WIRE;
	quotient_tmp[6..0]	: WIRE;
	sel[15..0]	: WIRE;
	selnose[55..0]	: WIRE;
	StageIn[23..0]	: WIRE;
	StageIn_tmp[23..0]	: WIRE;
	StageOut[20..0]	: WIRE;

BEGIN 
	add_sub_0.dataa[0..0] = NumeratorIn[6..6];
	add_sub_0.datab[0..0] = DenominatorIn[0..0];
	add_sub_1.dataa[] = ( StageIn[3..3], NumeratorIn[12..12]);
	add_sub_1.datab[1..0] = DenominatorIn[4..3];
	add_sub_2.dataa[] = ( StageIn[7..6], NumeratorIn[18..18]);
	add_sub_2.datab[2..0] = DenominatorIn[8..6];
	add_sub_3.dataa[] = ( StageIn[10..9], NumeratorIn[24..24]);
	add_sub_3.datab[2..0] = DenominatorIn[11..9];
	add_sub_4.dataa[] = ( StageIn[13..12], NumeratorIn[30..30]);
	add_sub_4.datab[2..0] = DenominatorIn[14..12];
	add_sub_5.dataa[] = ( StageIn[16..15], NumeratorIn[36..36]);
	add_sub_5.datab[2..0] = DenominatorIn[17..15];
	add_sub_6.dataa[] = ( StageIn[19..18], NumeratorIn[42..42]);
	add_sub_6.datab[2..0] = DenominatorIn[20..18];
	DenominatorIn[] = DenominatorIn_tmp[];
	DenominatorIn_tmp[] = ( DenominatorIn[20..0], ( gnd_wire, denominator[]));
	gnd_wire = B"0";
	nose[] = ( B"0000000", add_sub_6.cout, B"0000000", add_sub_5.cout, B"0000000", add_sub_4.cout, B"0000000", add_sub_3.cout, B"0000000", add_sub_2.cout, B"0000000", add_sub_1.cout, B"0000000", add_sub_0.cout);
	NumeratorIn[] = NumeratorIn_tmp[];
	NumeratorIn_tmp[] = ( NumeratorIn[48..0], numerator[]);
	prestg[] = ( add_sub_6.result[], add_sub_5.result[], add_sub_4.result[], add_sub_3.result[], add_sub_2.result[], GND, add_sub_1.result[], B"00", add_sub_0.result[]);
	quotient[] = quotient_tmp[];
	quotient_tmp[] = ( (! selnose[0..0]), (! selnose[8..8]), (! selnose[16..16]), (! selnose[24..24]), (! selnose[32..32]), (! selnose[40..40]), (! selnose[48..48]));
	remainder[1..0] = StageIn[22..21];
	sel[] = ( gnd_wire, (sel[15..15] # DenominatorIn[22..22]), gnd_wire, (sel[13..13] # DenominatorIn[19..19]), gnd_wire, (sel[11..11] # DenominatorIn[16..16]), gnd_wire, (sel[9..9] # DenominatorIn[13..13]), gnd_wire, (sel[7..7] # DenominatorIn[10..10]), gnd_wire, (sel[5..5] # DenominatorIn[7..7]), gnd_wire, (sel[3..3] # DenominatorIn[4..4]), gnd_wire, (sel[1..1] # DenominatorIn[1..1]));
	selnose[] = ( (! nose[55..55]), (! nose[54..54]), (! nose[53..53]), (! nose[52..52]), (! nose[51..51]), ((! nose[50..50]) # sel[15..15]), ((! nose[49..49]) # sel[14..14]), (! nose[48..48]), (! nose[47..47]), (! nose[46..46]), (! nose[45..45]), (! nose[44..44]), ((! nose[43..43]) # sel[13..13]), ((! nose[42..42]) # sel[12..12]), (! nose[41..41]), (! nose[40..40]), (! nose[39..39]), (! nose[38..38]), (! nose[37..37]), ((! nose[36..36]) # sel[11..11]), ((! nose[35..35]) # sel[10..10]), (! nose[34..34]), (! nose[33..33]), (! nose[32..32]), (! nose[31..31]), (! nose[30..30]), ((! nose[29..29]) # sel[9..9]), ((! nose[28..28]) # sel[8..8]), (! nose[27..27]), (! nose[26..26]), (! nose[25..25]), (! nose[24..24]), (! nose[23..23]), ((! nose[22..22]) # sel[7..7]), ((! nose[21..21]) # sel[6..6]), (! nose[20..20]), (! nose[19..19]), (! nose[18..18]), (! nose[17..17]), (! nose[16..16]), ((! nose[15..15]) # sel[5..5]), ((! nose[14..14]) # sel[4..4]), (! nose[13..13]), (! nose[12..12]), (! nose[11..11]), (! nose[10..10]), (! nose[9..9]), ((! nose[8..8]) # sel[3..3]), ((! nose[7..7]) # sel[2..2]), (! nose[6..6]), (! nose[5..5]), (! nose[4..4]), (! nose[3..3]), (! nose[2..2]), ((! nose[1..1]) # sel[1..1]), ((! nose[0..0]) # sel[0..0]));
	StageIn[] = StageIn_tmp[];
	StageIn_tmp[] = ( StageOut[20..0], B"000");
	StageOut[] = ( ((( StageIn[19..18], NumeratorIn[42..42]) & selnose[48..48]) # (prestg[20..18] & (! selnose[48..48]))), ((( StageIn[16..15], NumeratorIn[36..36]) & selnose[40..40]) # (prestg[17..15] & (! selnose[40..40]))), ((( StageIn[13..12], NumeratorIn[30..30]) & selnose[32..32]) # (prestg[14..12] & (! selnose[32..32]))), ((( StageIn[10..9], NumeratorIn[24..24]) & selnose[24..24]) # (prestg[11..9] & (! selnose[24..24]))), ((( StageIn[7..6], NumeratorIn[18..18]) & selnose[16..16]) # (prestg[8..6] & (! selnose[16..16]))), ((( StageIn[4..3], NumeratorIn[12..12]) & selnose[8..8]) # (prestg[5..3] & (! selnose[8..8]))), ((( StageIn[1..0], NumeratorIn[6..6]) & selnose[0..0]) # (prestg[2..0] & (! selnose[0..0]))));
END;
--VALID FILE
